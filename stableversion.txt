// gallery /[slug]/page.tsx
'use client';

import { useParams } from 'next/navigation';
import { useEffect } from 'react';
import GalleryView from '@/components/GalleryView';
import { useGalleryContext } from '@/context/GalleryContext';
import modelMap from '@/utils/modelMap';

export default function GallerySlugPage() {
  const { slug } = useParams();
  const { setSelectedGallery } = useGalleryContext();

  useEffect(() => {
    if (slug && typeof slug === 'string' && modelMap[slug]) {
      setSelectedGallery(modelMap[slug]);
    }
  }, [slug, setSelectedGallery]);

  return (
    <main className="h-screen w-full">
      <GalleryView />
    </main>
  );
}

//galleryModel/page.tsx
'use client';

import React from 'react';
import { useGalleryContext } from '@/context/GalleryContext';
import GalleryView from '@/components/GalleryView';

export default function GalleryModelPage() {
  const { selectedGallery } = useGalleryContext();

  if (!selectedGallery) {
    return (
      <div className="flex items-center justify-center h-screen">
        <p className="text-gray-700 text-lg">No gallery selected. Please choose a gallery to view.</p>
      </div>
    );
  }

  return <GalleryView modelUrl={selectedGallery.modelPath} />;
}

//layout.tsx
import './globals.css';
import { Inter } from 'next/font/google';
import type { Metadata } from 'next';
import { GalleryProvider } from '@/context/GalleryContext';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Virtual Gallery',
  description: 'Explore 3D galleries and immersive experiences',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <GalleryProvider>
          {children}
        </GalleryProvider>
      </body>
    </html>
  );
}

//page.tsx
'use client';

import MainContent from '@/components/MainContent';
import SideContent from '@/components/SideContent';

export default function HomePage() {
  return (
    <div className="flex flex-row md:flex-col w-full h-screen">
      <div className="flex-1 overflow-auto">
        <MainContent /> {/* whatever displays the GalleryGrid */}
      </div>
      <div className="md:w-[30%] w-[30%]  transition-all duration-300">
        <SideContent />
      </div>
      
    </div>

  );
}

//components
\arrowstates
'use client';

import { useGalleryContext } from '@/context/GalleryContext';
import { FaArrowLeft, FaArrowRight } from 'react-icons/fa';

export default function ArrowStates() {
  const { navigatePrevious, navigateNext, previousGalleries, nextGalleries } = useGalleryContext();

  return (
    <div className="flex items-center gap-2">
      <button
        onClick={navigatePrevious}
        disabled={previousGalleries.length === 0}
        className="text-2xl text-gray-700 hover:text-gray-900 disabled:opacity-50"
      >
        <FaArrowLeft />
      </button>
      <button
        onClick={navigateNext}
        disabled={nextGalleries.length === 0}
        className="text-2xl text-gray-700 hover:text-gray-900 disabled:opacity-50"
      >
        <FaArrowRight />
      </button>
    </div>
  );
}

\download
'use client';

import React from 'react';
import { FaDownload } from 'react-icons/fa';

type Props = {
  fileUrl: string;
  fileName?: string;
};

export default function DownloadButton({ fileUrl, fileName = 'download' }: Props) {
  const handleDownload = () => {
    const link = document.createElement('a');
    link.href = fileUrl;
    link.setAttribute('download', fileName);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <button
      onClick={handleDownload}
      className="flex items-center gap-2 text-sm text-purple-700 hover:text-purple-900 px-3 py-1.5 rounded-full"
    >
      <FaDownload className="text-base" />
      Download
    </button>
  );
}

/gallerycard
'use client';

import Image from 'next/image';
import React from 'react';
import { useRouter } from 'next/navigation';
import { useGalleryContext } from '@/context/GalleryContext';
import { GalleryData } from '@/utils/modelMap';
import { FaDownload, FaUpload } from 'react-icons/fa';
import DownloadButton from './DownloadButton';
import ShareGallery from './ShareGallery';


type Props = {
  id: string;
  data: GalleryData;
};

export default function GalleryCard({ id, data }: Props) {
  const { selectedGallery, setSelectedGallery } = useGalleryContext();
  const router = useRouter();

  const isSelected = selectedGallery?.title === data.title;

  const handleSelect = () => {
    try {
      setSelectedGallery(data);
    } catch (error) {
      console.error('Failed to set selected gallery:', error);
    }
  };

  const handleShare = () => {
    const query = new URLSearchParams({
      model: data.modelPath,
      slug: id,
      title: data.title,
    }).toString();
    router.push(`/modelPreview?${query}`);
  };
  
  const shareUrl = `${process.env.NEXT_PUBLIC_BASE_URL}/galleryModel`;

  return (
    <div
      onClick={handleSelect}
      className={`flex flex-col justify-between rounded-2xl bg-white shadow-md ring-1 ring-gray-200 p-4 transition hover:shadow-lg ${
        isSelected ? 'ring-2 ring-purple-600' : ''
      }`}
    >
      {/* Image  */}
      <div className="relative h-[16rem] w-full mb-4">
        <Image
          src={data.image}
          alt={`Preview of ${data.title}`}
          fill
          className="object-cover rounded-lg"
          sizes="(max-width: 768px) 100vw, 33vw"
        />
      </div>
      {/* Text data */}
      <div>
        <h2 className="text-lg font-semibold text-gray-800">{data.title}</h2>
        <p className="text-sm text-gray-500 mt-1">Category: {id}</p>
        <p className="text-sm text-gray-600 mt-2 mb-4 line-clamp-3">
          {data.description || 'No description provided.'}
        </p>
      </div>
      <div className="flex items-center justify-between">
        {/* implement function for downloading data pdf */}

        <div className="flex items-center gap-2 text-sm bg-purple-100 text-purple-900 px-3 py-1.5 rounded-full hover:bg-purple-200">
          <DownloadButton  fileUrl={data.pdf} fileName={`${data.title}.pdf`} />
          <ShareGallery  shareUrl={shareUrl} title={data.title} />
        </div>
      </div>
    </div>
  );
}

\gallerygrid
'use client';

import GalleryCard from './GalleryCard';
import modelMap from '@/utils/modelMap';

export default function GalleryGrid() {
  return (
    <div className="mt-10 grid gap-6 sm:mt-16 grid-cols-3 sm:grid-cols-4 lg:grid-cols-3 gap-6 auto-rows-fr">
        {Object.entries(modelMap).map(([slug, data]) => (
          <div
            key={slug}
            className="relative flex flex-col overflow-hidden rounded-2xl border border-gray-200 shadow-sm bg-white"
          >
            <GalleryCard id={slug} data={data} />
          </div>
        ))}
      </div>
  );
}

\galleryheader
'use client';

import { useEffect, useState } from 'react';
import GalleryInput from './GalleryInput';

interface GalleryHeaderProps {
  selectedTitle: string;
}

const GalleryHeader: React.FC<GalleryHeaderProps> = ({ selectedTitle }) => {
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    setSearchTerm(selectedTitle);
  }, [selectedTitle]);

  return (
    <div className="flex items-center justify-center gap-[5px] mt-4 mb-6 px-4">
      {/* Arrow icons (SVG or your existing component) */}
      <span className="text-2xl">ü°êü°í</span>

      {/* Main Heading */}
      <h1 className="text-xl font-bold tracking-tight text-gray-900">
        VIRTUAL EXHIBITION:
      </h1>

      {/* Gallery Input (5px to the right of heading) */}
      <GalleryInput value={searchTerm} onChange={setSearchTerm} />
    </div>
  );
};

export default GalleryHeader;

\galleryinput
'use client';

import { useEffect, useRef, useState } from 'react';
import modelMap, { GalleryData } from '@/utils/modelMap';
import { useGalleryContext } from '@/context/GalleryContext';

type Props = {
  value: string;
  onChange: (value: string) => void;
};

export default function GalleryInput({ value, onChange }: Props) {
  const [inputValue, setInputValue] = useState('');
  const [error, setError] = useState('');
  const [isFocused, setIsFocused] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const debounceTimer = useRef<NodeJS.Timeout | null>(null);
  const { selectedGallery, setSelectedGallery } = useGalleryContext();

  useEffect(() => {
    if (selectedGallery) {
      setInputValue(selectedGallery.title);
      onChange(selectedGallery.title);
      setError('');
    }
  }, [selectedGallery]);

  const allTitles = Object.values(modelMap).map((data) =>
    data.title?.toLowerCase().trim()
  );
  const allSlugs = Object.keys(modelMap);

  const validateInput = (input: string) => {
    const normalized = input.toLowerCase().trim();
    const slugMatch = allSlugs.find((slug) => slug === normalized);
    const titleMatch = Object.entries(modelMap).find(
      ([, data]) => data.title?.toLowerCase().trim() === normalized
    );

    if (slugMatch) {
      setError('');
      setSelectedGallery(modelMap[slugMatch]);
      onChange(modelMap[slugMatch].title);
    } else if (titleMatch) {
      setError('');
      setSelectedGallery(titleMatch[1]);
      onChange(titleMatch[1].title);
    } else {
      setError('No match found. Try a different search or select a Gallery card instead.');
      onChange('');
    }
  };

  // Debounced validation after typing
  useEffect(() => {
    if (debounceTimer.current) clearTimeout(debounceTimer.current);

    if (inputValue.trim() === '') {
      setError('');
      return;
    }
          
    debounceTimer.current = setTimeout(() => {
      validateInput(inputValue);
    }, 500);

    return () => {
      if (debounceTimer.current) clearTimeout(debounceTimer.current);
    };
  }, [inputValue]);

  return (
    <div className="flex flex-col gap-1 w-72">
      <input
        ref={inputRef}
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
        onFocus={() => setIsFocused(true)}
        onBlur={() => setIsFocused(false)}
        placeholder={isFocused || value ? '' : 'Search exhibitions...'}
        className="px-4 py-2 rounded-lg border border-gray-300 shadow-sm text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition"
      />
      {error && <p className="text-sm text-red-600">{error}</p>}
    </div>
  );
}

\galleryView
'use client';

import { useGalleryContext } from '@/context/GalleryContext';
import ModelPreview from './ModelPreview';
import UserControl from './UserControl';
import TourButton from './TourButton';

export default function GalleryView() {
  const { selectedGallery } = useGalleryContext();

  if (!selectedGallery) return <p className="text-center">Select a gallery to view the model.</p>;

  return (
    <div className="relative w-full h-screen">
      <ModelPreview url={selectedGallery.modelPath} />
      <UserControl />
      <TourButton />
    </div>
  );
}

\loading logic
"use client";

import { useGalleryContext } from "@/context/GalleryContext";
import { useEffect, useState } from "react";
import TourButton from "./TourButton";
import modelMap from "@/utils/modelMap";

export default function LoadingLogic() {
  const { selectedGallery } = useGalleryContext();
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (selectedGallery) {
      setLoading(true);
      const timeout = setTimeout(() => setLoading(false), 1000);
      return () => clearTimeout(timeout);
    }
  }, [selectedGallery]);

  if (!selectedGallery) {
    return <p className="text-gray-400 text-sm">Select a gallery to preview.</p>;
  }

  const displayText = loading
    ? `Loading model: ${selectedGallery}`
    : `Ready to load model: ${selectedGallery}`;

  return (
    <>
      <p className="text-xs text-gray-400">{displayText}</p>
      {!loading && <TourButton galleryName={selectedGallery} />}
    </>
  );
}

\maincontent
'use client';

import { useState } from 'react';
import GalleryHeader from '@/components/GalleryHeader';
import GalleryCard from './GalleryCard';
import modelMap from '@/utils/modelMap';
import GalleryGrid from './GalleryGrid';

export default function MainContent() {
  const [selectedGalleryTitle, setSelectedGalleryTitle] = useState('Impressionist Landscapes');

  return (
    <section className="w-[70%] p-8 bg-gray-50 border-r border-gray-300 overflow-y-auto">
      <GalleryHeader selectedTitle={selectedGalleryTitle} />
      <GalleryGrid />
    </section>
  );
}

\modelpreview
'use client';

import { Canvas, useFrame } from '@react-three/fiber';
import { useGLTF } from '@react-three/drei';
import { useRef } from 'react';
import * as THREE from 'three';

type Props = {
  url: string;
};

function SpinningModel({ url }: { url: string }) {
  const ref = useRef<THREE.Group>(null);
  const { scene } = useGLTF(url);

  useFrame(() => {
    if (ref.current) {
      ref.current.rotation.y += 0.005;
    }
  });

  return <primitive object={scene} ref={ref} />;
}

export default function ModelPreview({ url }: Props) {
  return (
    <Canvas
      className="w-full h-full"
      camera={{ position: [0, 1, 3], fov: 50 }}
      style={{ touchAction: 'none' }}
    >
      <ambientLight intensity={1} />
      <directionalLight position={[3, 3, 3]} intensity={1.5} />
      <SpinningModel url={url} />
      {/* OrbitControls removed for non-interactive view */}
    </Canvas>
  );
}

\sharegallery
'use client';

import React from 'react';
import { FaUpload } from 'react-icons/fa';

type Props = {
  shareUrl: string;
  title: string;
};

export default function ShareGallery({ shareUrl, title }: Props) {
  const handleShare = async () => {
    try {
      if (navigator.share) {
        await navigator.share({
          title,
          url: shareUrl,
        });
      } else {
        alert('Sharing is not supported on this device.');
      }
    } catch (err) {
      console.error('Sharing failed:', err);
    }
  };

  return (
    <button
      onClick={handleShare}
      className="flex items-center gap-2 text-sm bg-purple-100 text-purple-900 px-3 py-1.5 rounded-full hover:bg-purple-200"
    >
      <FaUpload className="text-xs" />
      Share
    </button>
  );
}

\sideContent
'use client';

import { useGalleryContext } from '@/context/GalleryContext';
import { useRouter } from 'next/navigation';
import ModelPreview from './ModelPreview';
import { useEffect, useState } from 'react';
import TourButton from '@/components/TourButton';

export default function SideContent() {
  const { selectedGallery } = useGalleryContext();
  const router = useRouter();
  const [slug, setSlug] = useState('');

  useEffect(() => {
    if (selectedGallery) {
      const formattedSlug = selectedGallery.title
        .toLowerCase()
        .replace(/\s+/g, '-');
      setSlug(formattedSlug);
    }
  }, [selectedGallery]);

  if (!selectedGallery) {
    return (
      <div className="flex items-center justify-center h-full border rounded-xl shadow-sm p-4 bg-gray-50 text-gray-400">
        Select a gallery to preview the model
      </div>
    );
  }

  return (
    <div className="relative w-full h-full bg-white shadow-md border rounded-xl overflow-hidden">
      <div className="h-full w-full">
        <ModelPreview url={selectedGallery.modelPath} />
      </div>
      <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 z-50">
        <TourButton />
      </div>
    </div>
  );
}

\tourbutton
'use client';

import { useGalleryContext } from '@/context/GalleryContext';
import { useRouter } from 'next/navigation';

export default function TourButton() {
  const { selectedGallery } = useGalleryContext();
  const router = useRouter();

  if (!selectedGallery) return null;

  const handleTour = () => {
    const slug = selectedGallery.title.toLowerCase().replace(/\s+/g, '-');
    const query = new URLSearchParams({
      model: selectedGallery.modelPath,
      slug,
      title: selectedGallery.title,
    }).toString();

    router.push(`/modelPreview?${query}`);
  };

  return (
    <button
      onClick={handleTour}
      className="absolute bottom-6 left-1/2 transform -translate-x-1/2 px-5 py-2 text-sm bg-purple-600 hover:bg-purple-700 text-white rounded-full shadow-lg"
    >
      Start Tour
    </button>
  );
}

\usercontrols
'use client';

import { Canvas } from '@react-three/fiber';
import { OrbitControls } from '@react-three/drei';
import { Suspense } from 'react';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { useLoader } from '@react-three/fiber';

function Model({ path }: { path: string }) {
  const gltf = useLoader(GLTFLoader, path);
  return <primitive object={gltf.scene} />;
}

export default function UserControl({ modelPath }: { modelPath: string }) {
  return (
    <Canvas camera={{ position: [0, 1.5, 4], fov: 50 }}>
      <ambientLight intensity={0.7} />
      <directionalLight position={[3, 2, 1]} />
      <Suspense fallback={null}>
        <Model path={modelPath} />
      </Suspense>
      <OrbitControls />
    </Canvas>
  );
}

\context/GalleryContext
'use client';

import React, { createContext, useContext, useState } from 'react';

type GalleryData = {
  title: string;
  description: string;
  image: string;
  modelPath: string;
  pdf: string;
};

type GalleryContextType = {
  selectedGallery: GalleryData | null;
  setSelectedGallery: (gallery: GalleryData) => void;
  previousGalleries: GalleryData[];
  nextGalleries: GalleryData[];
  navigatePrevious: () => void;
  navigateNext: () => void;
};

const GalleryContext = createContext<GalleryContextType | undefined>(undefined);

export const useGalleryContext = (): GalleryContextType => {
  const context = useContext(GalleryContext);
  if (!context) {
    throw new Error('useGalleryContext must be used within a GalleryProvider');
  }
  return context;
};

export const GalleryProvider = ({ children }: { children: React.ReactNode }) => {
  const [selectedGallery, setSelectedGalleryState] = useState<GalleryData | null>(null);
  const [previousGalleries, setPreviousGalleries] = useState<GalleryData[]>([]);
  const [nextGalleries, setNextGalleries] = useState<GalleryData[]>([]);

  const setSelectedGallery = (gallery: GalleryData) => {
    if (selectedGallery) {
      setPreviousGalleries((prev) => [selectedGallery, ...prev.slice(0, 1)]);
    }
    setNextGalleries([]);
    setSelectedGalleryState(gallery);
  };

  const navigatePrevious = () => {
    if (previousGalleries.length > 0) {
      const [prevGallery, ...rest] = previousGalleries;
      setNextGalleries((next) => [selectedGallery!, ...next]);
      setSelectedGalleryState(prevGallery);
      setPreviousGalleries(rest);
    }
  };

  const navigateNext = () => {
    if (nextGalleries.length > 0) {
      const [nextGallery, ...rest] = nextGalleries;
      setPreviousGalleries((prev) => [selectedGallery!, ...prev.slice(0, 1)]);
      setSelectedGalleryState(nextGallery);
      setNextGalleries(rest);
    }
  };

  return (
    <GalleryContext.Provider
      value={{
        selectedGallery,
        setSelectedGallery,
        previousGalleries,
        nextGalleries,
        navigatePrevious,
        navigateNext,
      }}
    >
      {children}
    </GalleryContext.Provider>
  );
};

\utils\modelMap
// utils/modelMap.ts

export type GalleryData = {
  title: string;
  description: string;
  image: string;
  modelPath: string;
  pdf: string;
};

const modelMap: Record<string, GalleryData> = {
  modernart: {
    title: "art_gallery",
    description: "Explore contemporary creativity and styles.",
    image: "/models/art-gallery-jpg.jpg",
    modelPath: "/models/art_gallery.glb",
    pdf: "/models/galleryData.pdf",
  },
  classic: {
    title: "gallery-room",
    description: "Step into timeless masterpieces.",
    image: "/models/gallery-room-jpg.jpg",
    modelPath: "/models/art_gallery.glb",
    pdf: "/models/galleryData.pdf",
  },
  surreal: {
    title: "The Entryway - Museum Diorama",
    description: "Dive into dreamlike visual narratives.",
    image: "/models/the-entryway-museum-diorama.jpg",
    modelPath: "/models/the-entryway-museum-diorama.glb",
    pdf: "/models/galleryData.pdf",
  },
  phenomenal: {
    title: "Town Center",
    description: "Urban-themed creative display.",
    image: "/models/town-center.jpg",
    modelPath: "/models/town-center.glb",
    pdf: "/models/galleryData.pdf",
  },
  sonder: {
    title: "mtv_vma_gallery_2016",
    description: "Award-themed media space.",
    image: "/models/mtv_vma_gallery_2016-jpg.jpg",
    modelPath: "/models/mtv_vma_gallery_2016.glb",
    pdf: "/models/galleryData.pdf",
  },
  ethereal: {
    title: "the_picture_gallery",
    description: "Visual storytelling in classical form.",
    image: "/models/artgalleries",
    modelPath: "/models/the_picture_gallery.glb",
    pdf: "/models/galleryData.pdf",
  },
};

export default modelMap;










