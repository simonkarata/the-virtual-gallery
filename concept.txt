app\

	page.tsx- <MainContent/> + <SideContent/>
	globals.css
	layout.tsx- pass any relevant components to be used across files.

Components\
	MainContent.tsx - <GalleryHeader/ > + <GalleryCard/> + Download_icon + share_icon ( references JSON converted to pdf files)
	
	GalleryHeader.tsx -<Gallery title/> VIRTUAL EXHIBITION.

	GalleryTitle.tsx - {Title} mapped from gallery data and well formatted for consistency.

	GalleryCard.tsx - Gallery Images + gallery description + <TourComponent/> all from <GalleryContext/>.

	GenericModel.tsx- selects gallery and maps out data to variables.

	TourComponent.tsx - <Gallery Title/>: <TourButton/>.

	TourButton.tsx - variable{primary_action} holding text "Tour": compponent: "{primary_action} + ->".
			// Initialize the router
			// To navigate to a new page on button click
				const searchParams = useSearchParams();
 			 	const galleryName = searchParams.get("gallery");
  				const router = useRouter(); // Initialize the router

  				const [loading, setLoading] = useState(false); // State for loading status

			// Handle the tour button click
  				const handleStartTour = () => {
    				setLoading(true); // Set loading state when the button is clicked
    			// Redirect to the tour page, passing the gallery name as a query parameter
    				router.push(`/tour?gallery=${galleryName}`);
  				};

	SideContent.tsx -  <SideDisplay/> + <LoadingLogic/>

	SideDisplay.tsx - loading text logic for header text / variable.

	LoadingLogic.tsx - Switch between Loading model, Ready to load model and <TourComponent/> : 
	(show what through selected gallery)try{
			     // if (!modelPath) {
    					return <p className="text-white text-sm mt-4">Select a gallery to preview.</p>;
  				}else { 
					<p className="text-xs text-gray-400">
            				   {loading ? `Loading model: ${galleryName}` : `Ready to load model: ${galleryName}`}
					   {/* Button to start the tour, only visible when a gallery is selected and FULLY LOADED  */}
      			  		   {galleryName && (
        			   	       <>
          			   		<button
            			      		  className="px-6 py-2 bg-white text-black font-semibold rounded-md hover:bg-gray-200 transition mb-1"
            			      		  onClick={handleStartTour}
            			      		  disabled={loading} // Disable button while loading
          			   	        >
            					  {loading ? -Switch between " Select a gallery" and "Selected Gallery":
							-  setvariables for "Start" "ing","Tour", "Select""ed","Gallery" ;
							{/* Text to encourage user to select another gallery when a model is loaded */}
      							{check galleryName and modelPath && )
        				 		   <p className="text-white text-sm mt-4">Select <bold>(a/ed)<bold/> gallery to preview.</p>
      							  )} "Starting Tour...","Select <b>ed</b> gallery  : "Start Tour", "Select <b>a<b/> gallery"}
          			  		</button>
          				</p>}
			} catch{
				if (modelError) {
    				  return (
      				   <div className="text-red-400 text-sm mt-4">
        			    Failed to load 3D model for: {selectedGallery}, try another gallery
      				   </div>
    				  );
  				}
			}

	GalleryView.tsx - Gallery scene{modelPath}
			|	<Canvas camera={{ position: [0, 1, 5], fov: 50 }}>
          		|	<ambientLight intensity={1} />
          		|	<directionalLight position={[0, 5, 5]} />
          		|	<OrbitControls enablePan enableZoom enableRotate />
          		|	<Suspense fallback={<span className="text-gray-300 text-sm">Loading model...</span>}>
            			{/* Ensure modelPath is valid string */}
           		|	{modelPath && typeof modelPath === "string" ? (
              		|	<GenericModel
                			modelPath={modelPath}
                			onError={() => setModelError(true)} // Error handler for the model
              			/>
            			) : (
              		|	<span className="text-red-400 text-sm">Invalid model path</span>
            			)}
          		|	</Suspense>
        			</Canvas>
	 		| 	
				"use client";

			|	import { useGLTF } from "@react-three/drei";

			|	export default function RoomScene() {
  				   const { scene } = useGLTF("/models/gallery-room.glb");

  				   return <primitive object={scene} scale={1} />;
			|	}
			+ Gallery: <GalleryTitle/> + <UserControls/> + Gallery 3D model 

	UserControl.tsx - two equidistant circles for 360 degrees screen navigation.




Context\GalleryContext.tsx - // Type for the context value, // Create context,// Custom hook to use the context,// Provider component,
	(select Galery)     // contexts/GalleryContext.tsx
				"use client";
			     // declare const modelPath = galleryName ? `/models/${galleryName}.glb` : null; // Assuming the model path depends on the gallery selection and is accessible all app.
				import React, { createContext, useContext, useState } from "react";
				|// Dynamic import to avoid SSR issues
		     		     const GenericModel = dynamic(() => import("./models/GenericModel"), { ssr: false });
				 
				// declare variables for"Start" , "Select", "Tour", "Gallery";

				//select a gallery
		     		    export default function MiniGalleryPreview() {
  		        	     const { selectedGallery } = useGalleryContext();
   		  		     const modelPath = selectedGallery ? modelMap[selectedGallery] : null;
  		  		     const router = useRouter();
  		  		     const [modelError, setModelError] = useState(false);
				|// error handling: 
				 // Check if selectedGallery is not null
				     const handleStartTour = () => {
				   	if (selectedGallery) 
				    	 { const {displayText} = < LoadingLogic/>
      					   const slug = slugify(selectedGallery, { lower: true });
       					   router.push(`/tours/${slug}`);
    				    	 } else {
      					    console.error("No gallery selected for the tour.");
    				    	 } 
  				      };
  				|// Validate model {Title},{Description}, {Images}, {modelPath}
 		    		     useEffect(() => {
    		   			if (modelPath && !modelPath.startsWith('/models/')) {
      		   			  console.warn("Invalid model path: ", modelPath);
      		   			  setModelError(true); // If the path is invalid, show error
    		      			 }
  		    			}, [modelPath]);

				|// Type for the context value
				     type GalleryContextType = {
  				      selectedGallery: string | null;
  				      setSelectedGallery: (gallery: string) => void;
				     };

				|// Create context
				     const GalleryContext = createContext<GalleryContextType | undefined>(undefined);

				|// Custom hook to use the context
				    export const useGalleryContext = (): GalleryContextType => {
  				     const context = useContext(GalleryContext);
  				      if (!context) {
    				      throw new Error("useGalleryContext must be used within a GalleryProvider");
  				      }
  				 return context;
				 };

				|// Provider component
				    export const GalleryProvider = ({ children }: { children: React.ReactNode }) => {
  				     const [selectedGallery, setSelectedGallery] = useState<string | null>(null);

  				| return (
    				   <GalleryContext.Provider value={{ selectedGallery, setSelectedGallery }}>
      				    {children}
    				   </GalleryContext.Provider>
  				  );
			        |};

public\models\

utils\modelMap.ts- Map gallery data to variable declarations and initialization from JSON made available for use across system.
(model variables)// Validate model {Title},{Description}, {Images}, {modelPath} 
		     const modelMap: Record<type , type ,type ,type  > = [ {Title},{Description}, {Images} ]
		     
		     
RULES: 
1 file for model metadata {Title},{Description}, {Images}, {model_src}-utils\modelMap.ts
Once a gallery is selected, it is previewed on the right section- Context\GalleryContext.tsx + <SideContent/>
Touring the gallery can only be through a <TourButton/> leading to <GalleryView />. 
Download exhibition story {Title}+{Description}+ {Images} in a well formatted manner and convert to pdf. (Recommend file to do this from).
Share exhibition through secure URL's and hyperlinks.
Dynamic import to avoid SSR issues-GalleryContext.tsx


06-05-2025
Implement logic to handle download in: [ <button
          href={data.pdf}
          download
          className="flex items-center gap-2 text-sm text-purple-700 hover:text-purple-900 px-3 py-1.5 rounded-full"
        >] under GalleryCard. 
-After that, I would like you to rename my modelPreview/page.tsx to become my galleryModel/page.tsx and make necessary changes to only load model by updating: [ 'use client'; 

import { useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls, useGLTF } from '@react-three/drei';
import { useRef } from 'react';
import * as THREE from 'three';

function SpinningModel({ url }: { url: string }) {
  const ref = useRef<THREE.Group>(null);
  const { scene } = useGLTF(url);

  useFrame(() => {
    if (ref.current) {
      ref.current.rotation.y += 0.005;
    }
  });

  return <primitive object={scene} ref={ref} />;
}

export default function ModelPreview() {
  const searchParams = useSearchParams();
  const modelUrl = searchParams.get('model') || '/models/default.glb';
  const slug = searchParams.get('slug') || '';
  const title = searchParams.get('title') || 'Gallery';

  return (
    <div className="h-screen max-w-full relative">
      <Canvas camera={{ position: [0, 1, 3], fov: 50 }}>
        <ambientLight intensity={1} />
        <directionalLight position={[3, 3, 3]} intensity={1.5} />
        <SpinningModel url={modelUrl} />
        <OrbitControls enableZoom={false} autoRotate={false} />
      </Canvas>

      {/* Overlay CTA */}
      <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2 z-10">
        <Link href={`/gallery/${slug}`}>
          <button className="px-6 py-3 bg-purple-800 text-white font-semibold rounded-md hover:bg-purple-700 shadow-lg">
            Tour {title}
          </button>
        </Link>
      </div>
    </div>
  );
} ].
-Under Components, let us change the SideDisplay.tsx into ModelPreview.tsx which implements infinite spinning animation at best camera view scaled of the galleryModel.tsx which is the selectedGallery's model. 
-Create a GalleryView.tsx which is a component that attaches the modelPreview and adds UserControls.tsx component to quide users on how to navigate and move thhrough the model's space.