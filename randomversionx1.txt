"use client";

import { useGLTF } from "@react-three/drei";
import { useRef, useState, useMemo } from "react";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

// The GenericModel component is dynamically loaded with SSR turned off
export default function GenericModel({
  modelPath,
  onError,
}: {
  modelPath: string;
  onError: () => void;
}) {
  // Load the model using GLTF loader from @react-three/drei
  const { scene: rawScene, error } = useGLTF(modelPath, true, undefined, onError);

  if (error) {
    return <span className="text-red-500">Failed to load model.</span>;
  }

  // Use a memo to clone the scene to prevent reference issues
  const scene = useMemo(() => rawScene.clone(), [rawScene]);

  const ref = useRef<THREE.Group>(null);
  const [isRotating, setIsRotating] = useState(true);

  // Apply rotation logic using useFrame
  useFrame(() => {
    if (ref.current && isRotating) {
      ref.current.rotation.y += 0.003; // Rotate the model
    }
  });

  // Stop rotation when the model is hovered or clicked
  const stopRotation = () => setIsRotating(false);
  const resumeRotation = () => setIsRotating(true);

  return (
    <primitive
      ref={ref}
      object={scene}
      scale={1.2}
      onPointerOver={stopRotation}   // Stop rotation on hover
      onPointerOut={resumeRotation}  // Resume rotation on hover out
      onClick={stopRotation}         // Stop rotation on click
      onTouchStart={stopRotation}    // Stop rotation on touch start
      onTouchEnd={resumeRotation}    // Resume rotation on touch end
    />
  );
}


//////
 //   <motion.div
          //   className="absolute bottom-[20%] left-1/2 transform -translate-x-1/2 flex space-x-6"
          //   initial={{ opacity: 0, y: 20 }}
          //   animate={{ opacity: 1, y: 0 }}
          //   exit={{ opacity: 0, y: 20 }}
          //   transition={{ duration: 0.03, ease: "easeOut" }}
          // >
            
          // </motion.div>
